// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadKern returns the embedded CollectionSpec for kern.
func loadKern() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_KernBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load kern: %w", err)
	}

	return spec, err
}

// loadKernObjects loads kern and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*kernObjects
//	*kernPrograms
//	*kernMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadKernObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadKern()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// kernSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type kernSpecs struct {
	kernProgramSpecs
	kernMapSpecs
}

// kernSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type kernProgramSpecs struct {
	TcDecap *ebpf.ProgramSpec `ebpf:"tc_decap"`
}

// kernMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type kernMapSpecs struct {
}

// kernObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadKernObjects or ebpf.CollectionSpec.LoadAndAssign.
type kernObjects struct {
	kernPrograms
	kernMaps
}

func (o *kernObjects) Close() error {
	return _KernClose(
		&o.kernPrograms,
		&o.kernMaps,
	)
}

// kernMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadKernObjects or ebpf.CollectionSpec.LoadAndAssign.
type kernMaps struct {
}

func (m *kernMaps) Close() error {
	return _KernClose()
}

// kernPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadKernObjects or ebpf.CollectionSpec.LoadAndAssign.
type kernPrograms struct {
	TcDecap *ebpf.Program `ebpf:"tc_decap"`
}

func (p *kernPrograms) Close() error {
	return _KernClose(
		p.TcDecap,
	)
}

func _KernClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed kern_bpfeb.o
var _KernBytes []byte
