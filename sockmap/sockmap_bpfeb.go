// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadSockmap returns the embedded CollectionSpec for sockmap.
func loadSockmap() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_SockmapBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load sockmap: %w", err)
	}

	return spec, err
}

// loadSockmapObjects loads sockmap and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*sockmapObjects
//	*sockmapPrograms
//	*sockmapMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadSockmapObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadSockmap()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// sockmapSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type sockmapSpecs struct {
	sockmapProgramSpecs
	sockmapMapSpecs
}

// sockmapSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type sockmapProgramSpecs struct {
	SkMsgProg   *ebpf.ProgramSpec `ebpf:"sk_msg_prog"`
	SockopsProg *ebpf.ProgramSpec `ebpf:"sockops_prog"`
}

// sockmapMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type sockmapMapSpecs struct {
	SockMap *ebpf.MapSpec `ebpf:"sock_map"`
}

// sockmapObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadSockmapObjects or ebpf.CollectionSpec.LoadAndAssign.
type sockmapObjects struct {
	sockmapPrograms
	sockmapMaps
}

func (o *sockmapObjects) Close() error {
	return _SockmapClose(
		&o.sockmapPrograms,
		&o.sockmapMaps,
	)
}

// sockmapMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadSockmapObjects or ebpf.CollectionSpec.LoadAndAssign.
type sockmapMaps struct {
	SockMap *ebpf.Map `ebpf:"sock_map"`
}

func (m *sockmapMaps) Close() error {
	return _SockmapClose(
		m.SockMap,
	)
}

// sockmapPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadSockmapObjects or ebpf.CollectionSpec.LoadAndAssign.
type sockmapPrograms struct {
	SkMsgProg   *ebpf.Program `ebpf:"sk_msg_prog"`
	SockopsProg *ebpf.Program `ebpf:"sockops_prog"`
}

func (p *sockmapPrograms) Close() error {
	return _SockmapClose(
		p.SkMsgProg,
		p.SockopsProg,
	)
}

func _SockmapClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed sockmap_bpfeb.o
var _SockmapBytes []byte
